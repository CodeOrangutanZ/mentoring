#+TITLE: Interview Advice
* How to stand out to an employer
*** Do more than the average
***** https://www.youtube.com/watch?v=ybLA79IdEdY De Wet Blomerus - What I learned from applying for 107 jobs
******* _To get better than average results, put in better than average effort - De Wet Blomerus_
******* Treat it like a sales problem
******* See: Sales funnel
*** Take responsibility for your own career development
*** Code as a hobby
*** Have something to show off
***** Portfolios used to be popular
***** Single cool thing to show off
*** Be fluent with code when solving whiteboard problems
***** Bring your own markers - fisken_ai
***** Ask if you a laptop
***** Ask if you can use a code editor
***** Process
******* Write out the inputs, walk through doing the problem, then write that algorithm
******* Talk through the algorithm
******* Then write the code
******* Look for edge cases in your code after writing
***** Disccuss complexity
******* Mention time and space
***** Discuss multiple algorithms
******* Simplest, brute force - slow, but obviously correct
******* Discuss different approaches, optimizing for space vs time
***** Interviewers will change the problem
******* Fall back to simple but obviously correct, in order to proceed to new direction for better fit algorithm
***** How to become fluent
******* Practice red, green, refactor (TDD)
******* Practice ping pong coding
******* Practicing on LeetCode and binarysearch.com
*** Do your homework on the company
*** Learn constantly
***** Course: Learning how to learn, Barbara Oakley and Terence Sejnowski
******* Book: A Mind For Numbers
******* Course is based on neuroscience
******* Lots of learning material out there is incorrect
********* Neuromyths
*********** See: https://en.wikipedia.org/wiki/Educational_neuroscience#Neuromyths
*********** Only use 10% of your brain
*********** Learning styles (auditory, visual, kinesthetic)
*********** Cone of experience, people remember:
************* 10% of what they READ
************* 20% of what they HEAR
************* 30% of what they SEE
************* ...
************* 90% of what they DO
********* Illusions of competence in learning
*********** Rereading
*********** Highlighting
*********** Reading solutions
*********** Just understanding
***** MIT Open Course Ware
******* Topics
********* Discrete Mathematics
********* Calculus
********* Engineering Math
*********** https://www.amazon.co.uk/Engineering-Mathematics-K-Stroud/dp/1403942463/
************* Goes from the end of high school to the end of undergrad
******* Video lectures as well as open textbooks
***** Khan Academy
******* Math from pre-high school
***** Math Youtube
******* 3Blue1Brown - https://www.youtube.com/channel/UCYO_jab_esuFRV4b17AJtAw
********* Good for quick intuition
***** Algorithms and Data Structures
******* Pavel Mavrin - https://www.youtube.com/playlist?list=PLrS21S1jm43igE57Ye_edwds_iL7ZOAG4
******* Steven Skiena - https://www.youtube.com/watch?v=22hwcnXIGgk&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx 
***** Computer Science
******* The Structure and Interpretation of Computer Programs
********* Book: https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book.html
********* Videos: https://www.youtube.com/playlist?list=PL8FE88AA54363BC46
********* Lecture notes: https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/lecture-notes/
***** Competitive programming
******* Links: https://github.com/lnishan/awesome-competitive-programming
***** Association for Computing Machinery
******* Great resource for professional development
******* Code of Ethics - https://www.acm.org/code-of-ethics
******* Learning center - https://learning.acm.org/about
*** Connect to programmer communities
***** Groups on Slack, Discord, Twitch
